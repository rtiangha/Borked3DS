name: borked3ds-build

on:
  push:
    branches: [ "*" ]
    tags: [ "*" ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  source:
    if: ${{ !github.head_ref }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Pack
        run: ./.ci/source.sh
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: source
          path: artifacts/
          compression-level: 9
  linux-clang-jammy:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target: ["appimage-clang-22.04", "fresh"]
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: linux
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Remove System Clang
        run: sudo apt autoremove clang-13 clang-format-13 clang-tidy-13 clang-14 clang-format-14 clang-tidy-14 clang-15 clang-format-15 clang-tidy-15 -y
      - name: Install Clang PPA 
        uses: myci-actions/add-deb-repo@11
        with:
          repo: deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-20 main
          repo-name: llvm
          keys-asc: https://apt.llvm.org/llvm-snapshot.gpg.key
      - name: Install GCC PPA
        run: sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
      - name: Update deb repositories
        run: sudo apt-get update
      - name: Install New Packages
        run: sudo apt-get -y install ccache gcc-11 clang-20 clang-tools-20 clang-20-doc libxcb-xkb-dev libclang-common-20-dev libclang-20-dev libclang1-20 clang-format-20 python3-clang-20 clangd-20 clang-tidy-20 libasound-dev xorg-dev libx11-dev libxext-dev jackd libpipewire-0.3-dev libsndio-dev libxcb-cursor-dev libasound2-dev libpulse-dev libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev unzip && sudo apt-get clean
      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: latest
          ninjaVersion: latest
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==3.3.*'
          version: '6.9.1'
          host: 'linux'
          target: 'desktop'
          arch: 'linux_gcc_64'
          modules: 'qtmultimedia qtwaylandcompositor'
          cache: 'true'
      - name: Install mold linker
        uses: rui314/setup-mold@v1
        with:
          make-default: false
      - name: Build
        run: ./.ci/linux-clang-22.04.sh
      - name: Pack
        run: ./.ci/pack.sh
        if: ${{ matrix.target == 'appimage-clang-22.04' }}
      - name: Upload
        uses: actions/upload-artifact@v4
        if: ${{ matrix.target == 'appimage-clang-22.04' }}
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
          compression-level: 9
  linux-clang-noble:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        target: ["appimage-clang-24.04", "fresh"]
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: linux
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Remove System Clang
        run: sudo apt autoremove clang-16 clang-format-16 clang-tidy-16 clang-17 clang-format-17 clang-tidy-17 clang-18 clang-format-18 clang-tidy-18 -y
      - name: Install Clang PPA
        uses: myci-actions/add-deb-repo@11
        with:
          repo: deb http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main
          repo-name: llvm
          keys-asc: https://apt.llvm.org/llvm-snapshot.gpg.key
      - name: Install GCC PPA
        run: sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
      - name: Update deb repositories 
        run: sudo apt-get update 
      - name: Install New Packages
        run: sudo apt-get -y install ccache gcc-14 clang-20 clang-tools-20 clang-20-doc libxcb-xkb-dev libclang-common-20-dev libclang-20-dev libclang1-20 clang-format-20 python3-clang-20 clangd-20 clang-tidy-20 libasound-dev xorg-dev libx11-dev libxext-dev jackd libpipewire-0.3-dev libsndio-dev libxcb-cursor-dev libasound2-dev libpulse-dev libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev unzip && sudo apt-get clean
      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: latest
          ninjaVersion: latest
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==3.3.*'
          version: '6.9.1'
          host: 'linux'
          target: 'desktop'
          arch: 'linux_gcc_64'
          modules: 'qtmultimedia qtwaylandcompositor'
          cache: 'true'
      - name: Install mold linker
        uses: rui314/setup-mold@v1
        with:
          make-default: false
      - name: Build
        run: ./.ci/linux-clang-24.04.sh
      - name: Pack
        run: ./.ci/pack.sh
        if: ${{ matrix.target == 'appimage-clang-24.04' }}
      - name: Upload
        uses: actions/upload-artifact@v4
        if: ${{ matrix.target == 'appimage-clang-24.04' }}
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
          compression-level: 9
  linux-clang-noble-arm:
    runs-on: ubuntu-24.04-arm
    strategy:
      matrix:
        target: ["appimage-clang-24.04-arm", "fresh"]
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: linux
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Remove System Clang
        run: sudo apt autoremove clang-16 clang-format-16 clang-tidy-16 clang-17 clang-format-17 clang-tidy-17 clang-18 clang-format-18 clang-tidy-18 -y
      - name: Install Clang PPA
        uses: myci-actions/add-deb-repo@11
        with:
          repo: deb http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main
          repo-name: llvm
          keys-asc: https://apt.llvm.org/llvm-snapshot.gpg.key
      - name: Install GCC PPA
        run: sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
      - name: Update deb repositories
        run: sudo apt-get update
      - name: Install New Packages
        run: sudo apt-get -y install libgstreamer-plugins-good1.0-0 libgstreamer-plugins-base1.0-0 libgstreamer-plugins-bad1.0-0 libdecor-0-0 libdecor-0-dev libraspberrypi0 libraspberrypi-dev ccache gcc-14 clang-20 clang-tools-20 clang-20-doc libxcb-xkb-dev libclang-common-20-dev libclang-20-dev libclang1-20 clang-format-20 python3-clang-20 clangd-20 clang-tidy-20 libasound-dev xorg-dev libx11-dev libxext-dev jackd libpipewire-0.3-dev libsndio-dev libxcb-cursor-dev libasound2-dev libpulse-dev libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev libxkbcommon-dev libdrm-dev libgbm-dev mesa-common-dev libgl1-mesa-dri libgl1-mesa-dev libgles2 libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev unzip && sudo apt-get clean
      - name: Manually link missing libraries
        run: |
          sudo ln -s /usr/lib/aarch64-linux-gnu/libGLESv2.so /usr/lib/libbrcmGLESv2.so
          sudo ln -s /usr/lib/aarch64-linux-gnu/libEGL.so /usr/lib/libbrcmEGL.so
      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: latest
          ninjaVersion: latest
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==3.3.*'
          version: '6.9.1'
          host: 'linux_arm64'
          target: 'desktop'
          arch: 'linux_gcc_arm64'
          modules: 'qtmultimedia qtwaylandcompositor'
          cache: 'true'
      - name: Build
        run: ./.ci/linux-clang-24.04-arm.sh
      - name: Pack
        run: ./.ci/pack.sh
        if: ${{ matrix.target == 'appimage-clang-24.04-arm' }}
      - name: Upload
        uses: actions/upload-artifact@v4
        if: ${{ matrix.target == 'appimage-clang-24.04-arm' }}
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
          compression-level: 9
  linux-gcc-noble:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        target: ["appimage-gcc-24.04", "fresh"]
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: linux
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Install GCC PPA
        run: sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
      - name: Update deb repositories 
        run: sudo apt-get update 
      - name: Install New Packages
        run: sudo apt-get -y install ccache gcc-14 build-essential libxcb-xkb-dev libasound-dev xorg-dev libx11-dev libxext-dev jackd libpipewire-0.3-dev libsndio-dev libxcb-cursor-dev libasound2-dev libpulse-dev libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev unzip && sudo apt-get clean
      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: latest
          ninjaVersion: latest
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==3.3.*'
          version: '6.9.1'
          host: 'linux'
          target: 'desktop'
          arch: 'linux_gcc_64'
          modules: 'qtmultimedia qtwaylandcompositor'
          cache: 'true'
      - name: Install mold linker
        uses: rui314/setup-mold@v1
        with:
          make-default: false
      - name: Build
        run: ./.ci/linux-gcc-24.04.sh
      - name: Pack
        run: ./.ci/pack.sh
        if: ${{ matrix.target == 'appimage-gcc-24.04' }}
      - name: Upload
        uses: actions/upload-artifact@v4
        if: ${{ matrix.target == 'appimage-gcc-24.04' }}
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
          compression-level: 9
  macos:
    runs-on: ${{ (matrix.target == 'x86_64' && 'macos-13') || 'macos-15' }}
    strategy:
      matrix:
        target: ["x86_64", "arm64"]
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: macos
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Setup XCode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - name: Install tools
        uses: tecolicom/actions-use-homebrew-tools@v1
        with:
          tools: ccache ninja
      - name: Build
        run: ./.ci/macos.sh
      - name: Prepare outputs for caching
        run: mv build/bundle $OS-$TARGET
      - name: Cache outputs for universal build
        uses: actions/cache/save@v4
        with:
          path: ${{ env.OS }}-${{ env.TARGET }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}
  macos-universal:
    runs-on: macos-15
    needs: macos
    env:
      OS: macos
      TARGET: universal
    steps:
      - uses: actions/checkout@v4
      - name: Download x86_64 build from cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.OS }}-x86_64
          key: ${{ runner.os }}-x86_64-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}
          fail-on-cache-miss: true
      - name: Download ARM64 build from cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.OS }}-arm64
          key: ${{ runner.os }}-arm64-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}
          fail-on-cache-miss: true
      - name: Create universal app
        run: ./.ci/macos-universal.sh
        env:
          ARTIFACTS: ${{ env.OS }}-x86_64 ${{ env.OS }}-arm64
      - name: Pack
        run: ./.ci/pack.sh
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
          compression-level: 9
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: ["msvc", "clang", "gcc"]
    defaults:
      run:
        shell: ${{ (matrix.target == 'clang' || matrix.target == 'gcc') && 'msys2' || 'bash' }} {0}
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: windows
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        if: ${{ matrix.target == 'msvc' }}
      - name: Install extra tools (MSVC)
        run: choco install ccache ninja ptime wget unzip
        if: ${{ matrix.target == 'msvc' }}
      - name: Set up MSYS2 (clang)
        uses: msys2/setup-msys2@v2
        if: ${{ matrix.target == 'clang' }}
        with:
          msystem: clang64
          update: true
          install: git make p7zip unzip
          pacboy: >-
            toolchain:p ccache:p cmake:p ninja:p 
            qt6-base:p qt6-multimedia:p qt6-multimedia-wmf:p qt6-tools:p qt6-translations:p
      - name: Install extra tools (Clang)
        if: ${{ matrix.target == 'clang' }}
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: install ptime wget
      - name: Install extra tools (GCC)
        if: ${{ matrix.target == 'gcc' }}
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: install ptime wget
      - name: Set up MINGW (gcc)
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: true
          install: git make p7zip unzip
          pacboy: >-
            toolchain:p ccache:p cmake:p ninja:p
            qt6-base:p qt6-multimedia:p qt6-multimedia-wmf:p qt6-tools:p qt6-translations:p
        if: ${{ matrix.target == 'gcc' }}
      - name: Install NSIS
        if: ${{ github.ref_type == 'tag' }}
        run: |
          wget https://download.sourceforge.net/project/nsis/NSIS%203/3.11/nsis-3.11-setup.exe -O D:/a/_temp/nsis-setup.exe
          ptime D:/a/_temp/nsis-setup.exe /S
        shell: pwsh
      - name: Disable line ending translation
        run: git config --global core.autocrlf input
      - name: Build (MSVC)
        run: ./.ci/windows-msvc.sh
        if: ${{ matrix.target == 'msvc' }}
      - name: Build (CLANG)
        run: ./.ci/windows-clang.sh
        if: ${{ matrix.target == 'clang' }}
      - name: Build (GCC)
        run: ./.ci/windows-gcc.sh
        if: ${{ matrix.target == 'gcc' }}
      - name: Generate installer
        if: ${{ github.ref_type == 'tag' }}
        run: |
          cd src\installer
          "C:\Program Files (x86)\NSIS\makensis.exe" /DPRODUCT_VARIANT=${{ matrix.target }} /DPRODUCT_VERSION=${{ github.ref_name }} broken3ds.nsi
          mkdir bin
          move /y *.exe bin\
        shell: cmd
      - name: Pack
        run: ./.ci/pack.sh
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
          compression-level: 9
  windows-arm:
    runs-on: windows-11-arm
    strategy:
      matrix:
        target: ["msvc-arm", "clang-arm", "gcc-arm"]
    defaults:
      run:
        shell: ${{ (matrix.target == 'clang-arm' || matrix.target == 'gcc-arm') && 'msys2' || 'bash' }} {0}
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: windows
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        if: ${{ matrix.target == 'msvc-arm' }}
      - name: Install extra tools (MSVC)
        run: choco install ccache ninja wget unzip
        if: ${{ matrix.target == 'msvc-arm' }}
      - name: Set up MSYS2 (clang)
        uses: msys2/setup-msys2@v2
        if: ${{ matrix.target == 'clang-arm' }}
        with:
          msystem: clang64
          update: true
          install: git make p7zip unzip
          pacboy: >-
            toolchain:p ccache:p cmake:p ninja:p 
            qt6-base:p qt6-multimedia:p qt6-multimedia-wmf:p qt6-tools:p qt6-translations:p
      - name: Set up MINGW (gcc)
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: true
          install: git make p7zip unzip
          pacboy: >-
            toolchain:p ccache:p cmake:p ninja:p
            qt6-base:p qt6-multimedia:p qt6-multimedia-wmf:p qt6-tools:p qt6-translations:p
        if: ${{ matrix.target == 'gcc-arm' }}
      - name: Disable line ending translation
        run: git config --global core.autocrlf input
      - name: Build (MSVC)
        run: ./.ci/windows-msvc.sh
        if: ${{ matrix.target == 'msvc-arm' }}
      - name: Build (CLANG)
        run: ./.ci/windows-clang.sh
        if: ${{ matrix.target == 'clang-arm' }}
      - name: Build (GCC)
        run: ./.ci/windows-gcc.sh
        if: ${{ matrix.target == 'gcc-arm' }}
      - name: Pack
        run: ./.ci/pack.sh
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
          compression-level: 9
  android:
    runs-on: ubuntu-24.04
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: android
      TARGET: universal
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-android-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-android-
      - name: Set tag name
        run: |
          if [[ "$GITHUB_REF_NAME" =~ ^canary- ]] || [[ "$GITHUB_REF_NAME" =~ ^nightly- ]]; then
              echo "GIT_TAG_NAME=$GITHUB_REF_NAME" >> $GITHUB_ENV
          fi
          echo $GIT_TAG_NAME
      - name: Update deb repositories 
        run: sudo apt-get update 
      - name: Install New Packages
        run: sudo apt-get -y install zip unzip python3 ccache apksigner && sudo apt-get clean
      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 3.30.6
          ninjaVersion: latest
      - name: Install JDK 23
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'
          cache: 'gradle'
          check-latest: true
      - name: Build
        run: JAVA_HOME=$JAVA_HOME_23_X64 ./.ci/android.sh
        env:
          DROID_KEYSTORE_B64: ${{ secrets.DROID_KEYSTORE_B64 }}
          DROID_KEY_ALIAS: ${{ secrets.DROID_KEY_ALIAS }}
          DROID_KEYSTORE_PASS: ${{ secrets.DROID_KEYSTORE_PASS }}
          DROID_KEY_PASS: ${{ secrets.DROID_KEY_PASS }}
      - name: Pack
        run: ../../../.ci/pack.sh
        working-directory: src/android/app
        env:
          UNPACKED: 1
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: src/android/app/artifacts/
          compression-level: 9
  ios:
    runs-on: macos-15
    if: ${{ !startsWith(github.ref, 'refs/tags/') }}
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: ios
      TARGET: arm64
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ios-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ios-
      - name: Setup XCode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - name: Install tools
        uses: tecolicom/actions-use-homebrew-tools@v1
        with:
          tools: ccache ninja
      - name: Build
        run: ./.ci/ios.sh
  release:
    runs-on: ubuntu-latest
    needs: [windows, windows-arm, linux-clang-jammy, linux-clang-noble, linux-clang-noble-arm, linux-gcc-noble, macos-universal, android, source]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/download-artifact@v4
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
      - name: Upload artifacts
        uses: alexellis/upload-assets@0.4.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_paths: '["./**/*.tar.*","./**/*.AppImage","./**/*.zip","./**/*.apk","./**/*.aab","./**/*.exe"]'
